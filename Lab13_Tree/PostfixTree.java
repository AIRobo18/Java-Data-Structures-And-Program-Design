import java.util.Stack;/** * <p/> * A class that creates an expression tree * from a postfix expression of binary operators * and one-letter operands. * * @author Robert Aroutiounian * @version 11/12/2015 */public class PostfixTree{    private BinaryNode<Character> root;    private final static String OPERATORS = "+-*/";    public PostfixTree()    {        this.root = null;    } // end default constructor    public PostfixTree(String postfix)    {        // This secondary constructor creates the postfix tree        // IMPLEMENT THIS METHOD        // stack to put partial expressions on        Stack<BinaryNode<Character>> exprStack = new Stack<>();        // #1 repeat for every character in the postfix        for (int i = 0; i < postfix.length(); i++)        {            //  #2 create subExpression tree of type BinaryNode<Character> with the current character            BinaryNode<Character> expression = new BinaryNode<>(postfix.charAt(i));            // #3 if the current character is an operator            if (OPERATORS.indexOf(postfix.charAt(i)) >= 0)            {                // #3a get the operands from the stack                BinaryNode<Character> expr1 = exprStack.pop();                BinaryNode<Character> expr2 = exprStack.pop();                // #3b build up the subExpression by setting the left and right                //     subtrees to the appropriate operands removed from the stack                expression.setRightChild(expr1);                expression.setLeftChild(expr2);            }            // #4 push subExpression on the stack            exprStack.push(expression);        }        // #5 At the end of it all the entire expression should be the        //    top expression on the stack, so remove it from the stack        //    and point root to it.        //    Note: that the input postfix string and the postorder output        //          should be the same.        this.root = exprStack.pop();    } // end constructor    public void inOrderTraversal()    {        inOrder(this.root);        System.out.println();    } // end inOrderTraversal    private void inOrder(BinaryNode<Character> node)    {        if (node != null)        {            inOrder(node.getLeftChild());            System.out.print(node.getData() + " ");            inOrder(node.getRightChild());        } // end if    } // end inOrder    public void postOrderTraversal()    {        // IMPLEMENT THE METHOD//        System.out.println("You need to implement me - postOrderTraversal()");        postOrder(this.root);        System.out.println();    } // end postOrderTraversal    private void postOrder(BinaryNode<Character> node)    {        // IMPLEMENT THE METHOD//        System.out.println("You need to implement me - postOrder()");        if (node != null)        {            postOrder(node.getLeftChild());            postOrder(node.getRightChild());            System.out.print(node.getData() + " ");        }    } // end postOrder    public static void main(String[] args)    {        String expression = "ab*c+";        System.out.println("The first postfix expression is:\n" + expression);        PostfixTree tree = new PostfixTree(expression);        System.out.println("\nThe inorder traversal is:");        tree.inOrderTraversal();        System.out.println("\nThe postorder traversal is:");        tree.postOrderTraversal();        // . . .        expression = "ab-c*def-+g/+";        System.out.println("\nThe second postfix expression is:\n" + expression);        tree = new PostfixTree(expression);        System.out.println("\nThe inorder traversal is:");        tree.inOrderTraversal();        System.out.println("\nThe postorder traversal is:");        tree.postOrderTraversal();    } // end main} // end PostfixTree		