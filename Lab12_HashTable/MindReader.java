import java.util.Random;/** * A class that guesses user choices of A or B. * * @author Robert Aroutiounian * @version 4/10/2015 */public class MindReader{    private DictionaryInterface<String, UserChoiceCounts> hashTable;    private UserChoiceCounts userCounts;    private Sequence searchSequence;    private ScoreBoard scoreBoard;    public MindReader()    {        this.hashTable = new HashedDictionary<>();        this.userCounts = new UserChoiceCounts();        this.searchSequence = new Sequence();        this.scoreBoard = new ScoreBoard();    } // end default constructor    public char getNextGuess()    {        // if the key is in dictionary make a guess base on its value        // otherwise make a guess based on the running total counts of As and Bs        char guess;        if (this.hashTable.getValue(this.searchSequence.getLastFourChoices()) != null)        {            int countA = this.hashTable.getValue(this.searchSequence.getLastFourChoices()).getCountA();            int countB = this.hashTable.getValue(this.searchSequence.getLastFourChoices()).getCountB();            if (countA >= countB)            {                guess = 'A';            }            else            {                guess = 'B';            }        }        else        {            int countA = this.userCounts.getCountA();            int countB = this.userCounts.getCountB();            if (countA >= countB)            {                guess = 'A';            }            else            {                guess = 'B';            }        }        return guess;    } // end getNextGuess    public void updateScoreBoard(String userResponse)    {        if (userResponse.equals("Y"))        {            this.scoreBoard.incrementCorrect();        }        else        {            this.scoreBoard.incrementIncorrect();        }    }    public void displayScoreBoard()    {        System.out.println("ScoreBoard: " + this.scoreBoard.getCorrectCount() + " correct. " +                            this.scoreBoard.getIncorrectCount() + " incorrect.");    }    public void updateUserChoices(char choice)    {        // update running counts        this.userCounts.incrementCount(choice);        // update counts per key if the key found in dictionary        // if the key not found in dictionary add new entry        if (this.hashTable.contains(this.searchSequence.getLastFourChoices()))        {            this.hashTable.getValue(this.searchSequence.getLastFourChoices()).incrementCount(choice);            System.out.println("--> updating the hash table for key: " + this.searchSequence.toString()                                + " value: " + this.hashTable.getValue(this.searchSequence.toString()));        }        else        {            UserChoiceCounts newCount = new UserChoiceCounts(choice);            this.hashTable.add(this.searchSequence.getLastFourChoices(), newCount);            this.hashTable.displayHashTable();        }        // update last four choices        this.searchSequence.updateLastFourChoices(choice);    } // end updateUserChoices} // end MindReader