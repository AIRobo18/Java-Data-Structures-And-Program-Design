import com.sun.tools.doclets.formats.html.SourceToHTMLConverter;import com.sun.xml.internal.bind.v2.runtime.output.SAXOutput;import java.util.EmptyStackException;/** A class of stacks whose entries are stored in an array. @author Robert Aroutiounian @version 09/14/2015 */public final class ArrayStack<T> implements TextbookStackInterface<T>{	private T[] myStack;    // Array of myStack entries	private int topIndex; // Index of top entry	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;	public ArrayStack()	{		this(DEFAULT_CAPACITY);	} // end default constructor	public ArrayStack(int initialCapacity)	{		checkCapacity(initialCapacity);		T[] tempStack = (T[]) new Object[initialCapacity];		this.myStack = tempStack;		this.topIndex = this.myStack.length;		initialized = true;	} // end constructor	public void push(T newEntry)	{//		System.out.println(this.myStack.length);		checkInitialization();		ensureCapacity();//        System.out.println("Length of stack: " + this.myStack.length);//        System.out.println("Top index is: " + this.topIndex);        this.myStack[this.topIndex - 1] = newEntry;        this.topIndex--;	} // end push	public T peek() throws EmptyStackException	{		checkInitialization();		if (isEmpty())		{			throw new EmptyStackException();		}		else		{			return this.myStack[this.topIndex];		}	} // end peek	public T pop() throws EmptyStackException	{		if (isEmpty())		{			throw new EmptyStackException();		}		else		{			T top = this.myStack[this.topIndex];			this.myStack[this.topIndex] = null;			this.topIndex++;			return top;		}	} // end pop	public boolean isEmpty()	{		if (this.topIndex == this.myStack.length)		{			return true;		}		else		{			return false;  //THIS IS A STUB		}	} // end isEmpty	public void clear()	{        while (!isEmpty())        {            this.myStack[this.topIndex] = null;            this.topIndex++;        }	} // end clear	// Throws an exception if this object is not initialized.	private void checkInitialization() throws SecurityException	{		if (!this.initialized)		{			throw new SecurityException("Uninitialized");		}	} // end checkInitialization	// Throws an exception if the client requests a capacity that is too large.	private void checkCapacity(int capacity) throws IllegalStateException	{		if (capacity > this.MAX_CAPACITY)        {            throw new IllegalStateException("Capacity too large");        }	} // end checkCapacity	// Doubles the size of the array myStack if it is full	// Precondition: checkInitialization has been called.	private void ensureCapacity()	{		checkInitialization();		if (this.topIndex == 0)		{			T[] temp = (T[]) new Object[2*this.myStack.length];			checkCapacity(temp.length);			for (int i = this.myStack.length - 1; i >= 0; i--)			{				temp[i + this.myStack.length] = this.myStack[i];			}            this.topIndex = this.topIndex + this.myStack.length;			this.myStack = (T[]) new Object[2*this.myStack.length];			for (int i = temp.length - 1; i >= 0; i--)			{				this.myStack[i] = temp[i];			}		}	} // end ensureCapacity	public static void main(String[] args)	{		System.out.println("*** Create a stack with default constructor ***");		TextbookStackInterface<String> defaultStack = new ArrayStack<>();		System.out.println("---> isEmpty() returns " + defaultStack.isEmpty());		System.out.println("---> Add to stack to get\n" +				"Joe Jane Jill Jess Jim");		defaultStack.push("Jim");		defaultStack.push("Jess");		defaultStack.push("Jill");		defaultStack.push("Jane");		defaultStack.push("Joe");		System.out.println("---> isEmpty() returns " + defaultStack.isEmpty());		System.out.println("--> Testing peek and pop:");		while (!defaultStack.isEmpty())		{			String top = defaultStack.peek();			System.out.println(top + " is at the top of the stack.");			top = defaultStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		System.out.println("--> Add to stack to get\n" +				"Jim Jess Joe\n");		defaultStack.push("Joe");		defaultStack.push("Jess");		defaultStack.push("Jim");		System.out.println("--> Testing clear:");		defaultStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		try		{			System.out.println("defaultStack.peek() returns: ");			System.out.println(defaultStack.peek());		}		catch (EmptyStackException ems)		{			System.out.println(" CORRECT - EmptyStackException has been thrown");		}		try		{			System.out.println("defaultStack.pop() returns: ");			System.out.println(defaultStack.pop());		}		catch (EmptyStackException ems)		{			System.out.println(" CORRECT - EmptyStackException has been thrown");		}		System.out.println("\n*** Create a stack with the secondary constructor ***");		TextbookStackInterface<String> smallStack = new ArrayStack<>(3);		System.out.println("--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("--> Add to stack to get\n" +				"Joe Jane Jill Jess Jim");		smallStack.push("Jim");		smallStack.push("Jess");		smallStack.push("Jill");		smallStack.push("Jane");		smallStack.push("Joe");		System.out.println("--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("-->Testing peek and pop:");		while (!smallStack.isEmpty())		{			String top = smallStack.peek();			System.out.println(top + " is at the top of the stack.");			top = smallStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		System.out.println("--> Add to stack to get\n" +				"Jim Jess Joe\n");		smallStack.push("Joe");		smallStack.push("Jess");		smallStack.push("Jim");		System.out.println("--> Testing clear:");		smallStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		try		{			System.out.println("defaultStack.peek() returns: ");			System.out.println(smallStack.peek());		}		catch (EmptyStackException ems)		{			System.out.println(" CORRECT - EmptyStackException has been thrown");		}		try		{			System.out.println("defaultStack.pop() returns: ");			System.out.println(smallStack.pop());		}		catch (EmptyStackException ems)		{			System.out.println(" CORRECT - EmptyStackException has been thrown");		}		System.out.println("*** Done ***");	} // end main} // end ArrayStack