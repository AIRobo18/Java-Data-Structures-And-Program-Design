/** A class of stacks whose entries are stored in a chain of nodes. @author Robert Aroutiounian @version 09/14/2015 */public final class LinkedStack<T> implements TextbookStackInterface<T>{	private Node<T> topNode; // References the first node in the chain	public LinkedStack()	{		this.topNode = null;	} // end default constructor	public void push(T newEntry)	{		Node<T> newNode = new Node<>(newEntry, this.topNode);		this.topNode = newNode;	} // end push	public T peek() throws InsufficientNumberOfElementsOnStackException	{		if (isEmpty())		{			throw new InsufficientNumberOfElementsOnStackException("Stack is empty");		}		else		{			return this.topNode.data;		}	} // end peek	public T peek2()  throws InsufficientNumberOfElementsOnStackException	{		if (!isEmpty())		{			if (this.topNode.next != null)			{				return this.topNode.next.data;			}			else			{				throw new InsufficientNumberOfElementsOnStackException("There is only one element in stack");			}		}		else		{			throw new InsufficientNumberOfElementsOnStackException("Stack is empty");		}	} // end peek2	public T pop()	{		T top = peek();		if (this.topNode != null)		{			this.topNode = this.topNode.next;		}		return top;	} // end pop	public boolean isEmpty()	{		return this.topNode == null;	} // end isEmpty	public void clear()	{		this.topNode = null;	} // end clear	private class Node<S>	{		private S    data; // Entry in stack		private Node<S> next; // Link to next node		private Node(S dataPortion)		{			this(dataPortion, null);		} // end constructor		private Node(S dataPortion, Node<S> linkPortion)		{			this.data = dataPortion;			this.next = linkPortion;		} // end constructor	} // end Node	public static void main(String[] args)	{		System.out.println("*** Create a stack ***");		LinkedStack<String> myStack = new LinkedStack<>();		System.out.println("--> Add to stack to get\n" +				"Joe Jane Jill Jess Jim\n");		myStack.push("Jim");		myStack.push("Jess");		myStack.push("Jill");		myStack.push("Jane");		myStack.push("Joe");		System.out.println("--> Testing peek, peek2, and pop:");		while (!myStack.isEmpty())		{			String top = myStack.peek();			System.out.println(top + " is at the top of the stack.");			try			{				String beneathTop = myStack.peek2();				System.out.println(beneathTop + " is just beneath the top of the stack.");			}			catch (InsufficientNumberOfElementsOnStackException inoeose)			{				System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());			}			top = myStack.pop();			System.out.println(top + " is removed from the stack.\n");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + myStack.isEmpty());		try		{			String top = myStack.peek();			System.out.println(top + " is at the top of the stack.");		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			String beneathTop = myStack.peek2();			System.out.println(beneathTop + " is just beneath the top of the stack.");		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());;		}		System.out.println("*** Done ***");	}  // end main} // end LinkedStack